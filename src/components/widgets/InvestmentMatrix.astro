---
import { Icon } from 'astro-icon/components';
import Headline from '~/components/ui/Headline.astro';

interface MockItem {
  document: string;
  date: string;
  documentType: string;
  investmentRisks: string;
  marketConsiderations: string;
  investmentHighlights: string;
}

interface MockMatrixProps {
  title?: string;
  subtitle?: string;
  tagline?: string;
  items?: MockItem[];
  id?: string;
  isDark?: boolean;
  classes?: Record<string, string | Record<string, string>>;
  bg?: string;
}

const {
  title = 'Matriz de Demonstração',
  subtitle = 'Selecione um caso de uso para visualizar diferentes análises de documentos',
  tagline,
  items = [
    {
      document: 'DP&L Ano Fiscal 2024',
      date: '18 Jan, 2024',
      documentType: 'Financeiros',
      investmentRisks: 'Houve custos crescentes relacionados a',
      marketConsiderations: 'N/A',
      investmentHighlights: 'Receita: Valores do Projeto Alfa ao longo do curso...'
    },
    {
      document: 'Projeto Alfa CIM',
      date: '29 Abr, 2024',
      documentType: 'Materiais de Mercado',
      investmentRisks: 'Fatores de risco que não estão detalhados no CIM',
      marketConsiderations: 'Apesar do crescimento do TAM descrito no CIM',
      investmentHighlights: 'Crescimento orgânico rápido: Nos últimos 2'
    },
    {
      document: 'Visão Geral do Produto Projeto Alfa',
      date: '26 Fev, 2024',
      documentType: 'Produto',
      investmentRisks: 'Produto atual carece de detalhes sobre o mais r...',
      marketConsiderations: 'N/A',
      investmentHighlights: 'Flexível: O produto é adaptável para uma variedade de'
    },
    {
      document: 'Roadmap do Produto',
      date: '26 Fev, 2024',
      documentType: 'Produto',
      investmentRisks: 'Várias integrações listadas no roadmap em...',
      marketConsiderations: 'O roadmap detalha particularidades alinhadas com...',
      investmentHighlights: 'Integrações: Priorizadas a curto prazo são'
    },
    {
      document: 'Chamadas com Especialistas Projeto Alfa',
      date: '12 Mar, 2024',
      documentType: 'Cliente',
      investmentRisks: 'Especialistas hesitam sobre a defensibilidade da tecnologia',
      marketConsiderations: 'Especialistas divergem em opinião sobre o crescimento de...',
      investmentHighlights: 'Diferenciação: Especialistas consideram que há um alto nível...'
    },
    {
      document: 'Chamadas de Referência com Clientes',
      date: '18 Mar, 2024',
      documentType: 'Cliente',
      investmentRisks: 'Feedback negativo comum entre clientes',
      marketConsiderations: 'Clientes listam diversos ventos favoráveis incluindo o pre...',
      investmentHighlights: 'Liderança no Mercado Inicial: A Empresa estabeleceu...'
    },
    {
      document: 'Relatório de Mercado',
      date: '30 Mar, 2024',
      documentType: 'Mercado',
      investmentRisks: 'Ventos contrários levantados neste relatório incluem',
      marketConsiderations: 'O TAM é estimado em aproximadamente $72B, com...',
      investmentHighlights: 'Mercado em Crescimento: Estudo demonstra um crescimento...'
    }
  ],
  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
}: MockMatrixProps = Astro.props;

// Define use cases for filtering
const useCases = [
  { id: 'all', name: 'Todos os Documentos', description: 'Visualize todos os documentos disponíveis' },
  { id: 'financial', name: 'Análise Financeira', description: 'Documentos relevantes para análise financeira' },
  { id: 'market', name: 'Análise de Mercado', description: 'Insights sobre o mercado e posicionamento' },
  { id: 'product', name: 'Avaliação de Produto', description: 'Documentos relacionados ao produto e roadmap' }
];
---

<section class="relative not-prose" {...id ? { id } : {}}>
  <div class="absolute inset-0 pointer-events-none -z-[1]" aria-hidden="true">
    <slot name="bg">
      {bg ? <Fragment set:html={bg} /> : null}
    </slot>
  </div>
  <div class:list={["relative max-w-7xl mx-auto px-4 sm:px-6 py-12 md:py-16 lg:py-20 text-default", { dark: isDark }]}>
    <Headline title={title} subtitle={subtitle} tagline={tagline} classes={classes?.headline} />
    
    <!-- Mock Command interface -->
    <div class="flex flex-col lg:flex-row lg:items-center justify-between py-md px-md gap-md">
      <div class="flex flex-row items-center gap-sm w-[230px]">
        <span class="text-primary-brand">
          <svg width="14" height="14" viewBox="0 0 16 16">
            <title>Hebbia</title>
            <g fill="currentColor" fill-rule="nonzero">
              <path d="M2.28696286,0 L2.28696286,2.26446857 L0,2.26446857 L0,0 L2.28696286,0 Z M2.28696286,3.228 L2.28696286,7.50948571 L0,7.50948571 L0,3.228 L2.28696286,3.228 Z M2.28696286,8.49551429 L2.28696286,15.6913143 L0,15.6913143 L0,8.49551429 L2.28696286,8.49551429 Z M7.55448571,0 L7.55448571,2.26446857 L3.27298286,2.26446857 L3.27298286,0 L7.55448571,0 Z M7.55448571,3.228 L7.55448571,7.50948571 L3.27298286,7.50948571 L3.27298286,3.228 L7.55448571,3.228 Z M7.55448571,8.49551429 L7.55448571,15.6913143 L3.27298286,15.6913143 L3.27298286,8.49551429 L7.55448571,8.49551429 Z M15.6913143,0 L15.6913143,2.26446857 L8.518,2.26446857 L8.518,0 L15.6913143,0 Z M15.6913143,3.228 L15.6913143,7.50948571 L8.518,7.50948571 L8.518,3.228 L15.6913143,3.228 Z M15.6913143,8.49551429 L15.6913143,15.6913143 L8.518,15.6913143 L8.518,8.49551429 L15.6913143,8.49551429 Z" id="Shape"></path>
            </g>
          </svg>
        </span>
        <span class="line-clamp-2 leading-4 whitespace-nowrap">First Screen Project Alpha</span>
      </div>

      <div class="rounded-md py-sm px-md bg-matrix border-matrix border flex flex-row gap-sm items-center drop-shadow-sm flex-1">
        <div class="flex flex-row justify-between items-center w-full">
          <span class="text-xxs line-clamp-2">We are meeting the management team of Project Alpha tomorrow. Draft a DD agenda based on your assessment of these documents.</span>
          <span class="shrink-0">
            <svg width="14" height="14" viewBox="0 0 14 14" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M11.1978 8.06074L12.2585 7.00013L7.75833 2.5L6.69772 3.56061L9.3866 6.2495L1.75781 6.2495L1.75781 7.74959H9.3866L6.69691 10.4393L7.75763 11.5L11.1974 8.06026L11.1978 8.06074Z" fill="currentColor" fill-opacity="0.4"></path>
            </svg>
          </span>
        </div>
      </div>

      <div class="lg:flex flex-row items-center gap-sm hidden">
        <div class="rounded-md py-sm px-md bg-matrix border-matrix border flex flex-row gap-sm items-center drop-shadow-sm !py-[5px] !px-[6px] !gap-xs">
          <svg width="14" height="14" viewBox="0 0 13 14" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path fill-rule="evenodd" clip-rule="evenodd" d="M2.15625 1.67188H7.48542L10.6829 4.86937V8.06687H9.61708V5.93521H6.41958V2.73771H3.22208V11.2644H6.41958V12.3302H2.15625V1.67188ZM7.48542 4.86937H9.1756L7.48542 3.17919V4.86937Z" fill="currentColor" fill-opacity="0.6"></path>
            <path d="M9.08417 8.06687H8.01833V9.66563H6.41958V10.7315H8.01833V12.3302H9.08417V10.7315H10.6829V9.66563H9.08417V8.06687Z" fill="currentColor" fill-opacity="0.6"></path>
          </svg>
          <span class="text-xxxs whitespace-nowrap text-ellipsis">Add documents</span>
        </div>
        <div class="rounded-md py-sm px-md bg-matrix border-matrix border flex flex-row gap-sm items-center drop-shadow-sm !py-[5px] !px-[6px] !gap-xs">
          <svg width="14" height="14" viewBox="0 0 13 14" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path fill-rule="evenodd" clip-rule="evenodd" d="M5.875 2.20508H6.9409H10.1367H10.6678H11.2026V7.53456H10.1367V3.27098H6.9409V7.53456H5.875V3.27098H2.67527V10.7339H5.87126V11.7998H2.14062V11.7983H1.60938V2.2052H2.14062V2.20508H5.875ZM8.00781 7.53345H9.07371V9.13403H10.6698V10.1999H9.07371V11.797H8.00781V10.1999H6.40625V9.13403H8.00781V7.53345Z" fill="currentColor" fill-opacity="0.6"></path>
          </svg>
          <span class="text-xxxs whitespace-nowrap text-ellipsis">Add column</span>
        </div>
      </div>
    </div>

    <!-- Use Case Selection Buttons -->
    <div class="flex flex-wrap gap-4 mb-8 mt-6 justify-center">
      {useCases.map(useCase => (
        <button
          class="use-case-btn px-6 py-3 rounded-md bg-gray-100 hover:bg-blue-100 transition-all text-sm font-medium"
          data-id={useCase.id}
        >
          <span class="block font-bold">{useCase.name}</span>
          <span class="text-xs text-gray-600">{useCase.description}</span>
        </button>
      ))}
    </div>
    
    <div class="bg-white rounded-lg shadow-xl overflow-hidden">
      <div class="overflow-x-auto">
        <table class="w-full border-collapse">
          <thead>
            <tr class="bg-blue-900 text-white">
              <th class="py-4 px-6 text-left">Documento</th>
              <th class="py-4 px-6 text-left">Data</th>
              <th class="py-4 px-6 text-left">Tipo de Documento</th>
              <th class="py-4 px-6 text-left">Riscos de Investimento</th>
              <th class="py-4 px-6 text-left">Considerações de Mercado</th>
              <th class="py-4 px-6 text-left">Destaques de Investimento</th>
            </tr>
          </thead>
          <tbody>
            {
              items.map((item, index) => (
                <tr 
                  class={`border-b border-gray-200 ${index % 2 === 0 ? 'bg-gray-50' : 'bg-white'} matrix-row`} 
                  data-document-type={item.documentType}
                >
                  <td class="py-4 px-6">
                    <div class="flex items-center gap-2">
                      <Icon name="tabler:file-text" class="w-5 h-5 text-blue-600" />
                      <span>{item.document}</span>
                    </div>
                  </td>
                  <td class="py-4 px-6">{item.date}</td>
                  <td class="py-4 px-6">
                    <span class={`px-3 py-1 rounded-full text-sm font-medium 
                      ${item.documentType === 'Financeiros' ? 'bg-purple-100 text-purple-800' : 
                        item.documentType === 'Materiais de Mercado' ? 'bg-purple-100 text-purple-800' : 
                        item.documentType === 'Produto' ? 'bg-amber-100 text-amber-800' : 
                        item.documentType === 'Cliente' ? 'bg-amber-100 text-amber-800' : 
                        'bg-green-100 text-green-800'}`}>
                      {item.documentType}
                    </span>
                  </td>
                  <td class="py-4 px-6 max-w-xs truncate">{item.investmentRisks}</td>
                  <td class="py-4 px-6 max-w-xs truncate">{item.marketConsiderations}</td>
                  <td class="py-4 px-6 max-w-xs truncate">{item.investmentHighlights}</td>
                </tr>
              ))
            }
          </tbody>
        </table>
      </div>
    </div>
  </div>
</section>

<script>
  // Client-side JavaScript for interactivity
  document.addEventListener('DOMContentLoaded', () => {
    const useCaseButtons = document.querySelectorAll('.use-case-btn');
    const tableRows = document.querySelectorAll('.matrix-row');
    
    // Define mapping from use cases to document types
    const useCaseToTypes = {
      'all': ['Financeiros', 'Materiais de Mercado', 'Produto', 'Cliente', 'Mercado'],
      'financial': ['Financeiros'],
      'market': ['Materiais de Mercado', 'Mercado'],
      'product': ['Produto', 'Cliente']
    };
    
    // Set active state for buttons
    const setActiveButton = (activeButton) => {
      useCaseButtons.forEach(btn => {
        btn.classList.remove('bg-blue-500', 'text-white');
        btn.classList.add('bg-gray-100');
      });
      
      activeButton.classList.remove('bg-gray-100');
      activeButton.classList.add('bg-blue-500', 'text-white');
    };
    
    // Filter table rows based on selected use case
    const filterRows = (useCaseId) => {
      const relevantTypes = useCaseToTypes[useCaseId];
      
      tableRows.forEach(row => {
        const docType = row.getAttribute('data-document-type');
        if (relevantTypes.includes(docType)) {
          row.classList.remove('hidden');
        } else {
          row.classList.add('hidden');
        }
      });
    };
    
    // Set initial state (show all)
    if (useCaseButtons.length > 0) {
      setActiveButton(useCaseButtons[0]);
    }
    
    // Handle button clicks
    useCaseButtons.forEach(btn => {
      btn.addEventListener('click', () => {
        const useCaseId = btn.getAttribute('data-id');
        setActiveButton(btn);
        filterRows(useCaseId);
      });
    });
  });
</script> 